
###########################################################################
# Github Actions CI Build Image, Test and push to Github Container Registry
############################################################################
#
# Description: Automatically builds this repo branch into a Docker image and pushes to Github Container Registry
# Deploy to all CXFabric develop and releases branches.
# Uses GH Actions built-in env variables. https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
#   Example: ${{ github.repository }} = cxfabric/nginx-hello-internet
#
# To deploy--
# Save this yaml to develop and release branches.
# Modify only env: codeblock values.
# - Set and increment the version numbers as needed.
# - Set TAG: 'dev' for develop branch. Set to 'prerel' for release branch patch work.

name: CI Build Image & Push to GHCR

on: # Set builds to trigger by push to 'develop' branch or manual start in the browser UI
  push:
    paths-ignore:
      - '.github/workflows/*.*'  # Ignore changes to the workflow files
    branches:
      - develop
      - release/**
  workflow_dispatch: # Allows for manual run when saved to master branch.

env: # Set the image version. Increment as needed.
  MAJOR_VERSION: 0 
  MINOR_VERSION: 10
  PATCH_VERSION: 0
  VERSION: $MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION
  TAG: 'dev' # Set to 'dev' for develop branch. Set to 'prerel' for release branch patch work.

jobs:
  build:
    runs-on: ubuntu-22.04 # Current Ubuntu LTS. Runs the build on Github Actions Ubuntu worker node in cloud.
    steps:
    - name: Checkout latest code using existing GH Actions
      uses: actions/checkout@v3  # See https://github.com/actions/checkout
      with: # Specify to the branch to checkout
        ref: ${{ github.ref_name }} # Built-in variable for the currently active branch name, e.g. release/CXF-v0.1.0
        # node-version: 18 # Current version to be cached. DISABLED. Not working. Needs research.
        # cache: 'npm' # Cache npm to increase CI build speed.

    - name: Add SHORT_SHA env property with commit short sha # Get last commit hash, shorten it, and add to env var SHORT_SHA for tagging builds
      run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

    # UNIT TESTING ONLY! Enable only for app repos with Jest testing
    # - name: Install all node_modules # Required for running Jest for unit testing before building the image
    #   run: npm install --production --legacy-peer-deps --silent && mv node_modules ../ # Copied runline from Dockerfile
    # - name: Run Jest Unit test # Run Jest unit testing.
    #   run: npm test

    - name: Log in to the Github Container registry # Uses the GH Action written by the Docker team (a bit strange IMO)
      uses: docker/login-action@v2  # See https://github.com/docker/login-action
      with:
        registry: ghcr.io   # The default github Container Registry url
        username: ${{ github.actor }}  # See https://github.com/docker/login-action#github-container-registry
        password: ${{ secrets.GITHUB_TOKEN }} # No need to pre-create. See https://docs.github.com/en/actions/security-guides/automatic-token-authentication

    - name: docker build # Build the Docker image from latest code commit and tag with shortened commit hash in the env var SHORT_SHA
      run: |
        docker build . -t ghcr.io/${{ github.repository }}:${{ env.VERSION}}-${{ env.TAG }}.${{ env.SHORT_SHA }}

    - name: docker push # Publish to CXFabric GH Container Registry. View in Github 'Your Profile>Packages' page. Use github.repository variable for 'owner/repo name'
      run: |
        docker push ghcr.io/${{ github.repository }}:${{ env.VERSION}}-${{ env.TAG }}.${{ env.SHORT_SHA }}

  